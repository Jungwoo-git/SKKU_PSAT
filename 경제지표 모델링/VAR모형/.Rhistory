rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data %>% names
window_size <- c(90, 100)
mtry = c(3, 4)
ntree = c(50, 100)
window_rf_RMSE <- expand.grid(mtry = mtry,
ntree = ntree,
window_size = window_size,
RMSE = NA)
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
for (k in window_size) {
n = dim(rf_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = rf_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut # 모든 변수를 다 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
RMSE_save <- NULL
for (mt in mtry) {
for (j in ntree) {
for ( i in (1:length(folds_test))) {
print(paste0(i, "th"))
rf_model <- randomForest(BTC_price~ Gold_price + Bond_yield + KOSPI + USD_exchange_rate + BTC_circulation +
VIX + NASDAQ + VKOSPI + S.P500 + Nvidia + AMD + MA + PYPL + SQ +
vidente + net_point_by_word + volume + Atinum + Woori,
data = rf_data, mtry = mt, ntree = j)
eco_test_final_y <- unlist(eco_y_test)
rf_fit <- predict(rf_model, newdata = eco_x_test[[i]])
RMSE_save <- c(RMSE_save, RMSE(rf_fit, eco_test_final_y[i]))
}
window_rf_RMSE[t, "RMSE"] <- mean(RMSE_save)
t = t + 1
RMSE_save <- NULL # RMSE_save 초기화
}
}
}
window_size <- c(90, 100)
mtry = c(3, 4)
ntree = c(50, 100)
window_rf_RMSE <- expand.grid(mtry = mtry,
ntree = ntree,
window_size = window_size,
RMSE = NA)
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
for (k in window_size) {
n = dim(rf_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = rf_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut # 모든 변수를 다 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
RMSE_save <- NULL
for (mt in mtry) {
for (j in ntree) {
rf_model <- randomForest(BTC_price~ Gold_price + Bond_yield + KOSPI + USD_exchange_rate + BTC_circulation +
VIX + NASDAQ + VKOSPI + S.P500 + Nvidia + AMD + MA + PYPL + SQ +
vidente + net_point_by_word + volume + Atinum + Woori,
data = rf_data, mtry = mt, ntree = j)
for ( i in (1:length(folds_test))) {
print(paste0("mtry :", mt, "\n ntree :", j,"\n",i, "th"))
eco_test_final_y <- unlist(eco_y_test)
rf_fit <- predict(rf_model, newdata = eco_x_test[[i]])
RMSE_save <- c(RMSE_save, RMSE(rf_fit, eco_test_final_y[i]))
}
window_rf_RMSE[t, "RMSE"] <- mean(RMSE_save)
t = t + 1
RMSE_save <- NULL # RMSE_save 초기화
}
}
}
window_rf_RMSE
print("er\n", "2")
print("er"\n, "sasa")
window_size <- c(90, 95, 100)
mtry = c(3, 4,5 )
ntree = c(50, 100, 150)
window_rf_RMSE <- expand.grid(mtry = mtry,
ntree = ntree,
window_size = window_size,
RMSE = NA)
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
for (k in window_size) {
n = dim(rf_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = rf_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut # 모든 변수를 다 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
RMSE_save <- NULL
for (mt in mtry) {
for (j in ntree) {
rf_model <- randomForest(BTC_price~ Gold_price + Bond_yield + KOSPI + USD_exchange_rate + BTC_circulation +
VIX + NASDAQ + VKOSPI + S.P500 + Nvidia + AMD + MA + PYPL + SQ +
vidente + net_point_by_word + volume + Atinum + Woori,
data = rf_data, mtry = mt, ntree = j)
for ( i in (1:length(folds_test))) {
print(paste0("mtry :", mt, ",  ntree :", j ,"시점 : ",i, "th"))
eco_test_final_y <- unlist(eco_y_test)
rf_fit <- predict(rf_model, newdata = eco_x_test[[i]])
RMSE_save <- c(RMSE_save, RMSE(rf_fit, eco_test_final_y[i]))
}
window_rf_RMSE[t, "RMSE"] <- mean(RMSE_save)
t = t + 1
RMSE_save <- NULL # RMSE_save 초기화
}
}
}
window_rf_RMSE
rf_data
rf_data %>% head
rf_data[, "Date"] == "2018-01-01"
which(rf_data[, "Date"] == "2018-01-01")
rf_data[which(rf_data[, "Date"] == "2018-01-01"), ]
rf_data[which(rf_data[, "Date"] == "2018-01-01"):dim(rf_data)[1], ]
dim(rf_data)
dim(rf_data)[1]
rf_data[which(rf_data[, "Date"] == "2018-01-01"):dim(rf_data)[1], ]
rf_data[which(rf_data[, "Date"] == "2018-01-01"):dim(rf_data)[1], ]
which(rf_data[, "Date"] == "2018-01-01"):dim(rf_data)[1]
rf_data[, 'Date'] %>% order
rf_data[rf_data[, 'Date'] %>% order, ])
rf_data[rf_data[, 'Date'] %>% order, ]
rf_data[rf_data[, 'Date'] %>% order, ] %>% head
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-04-01
## [ data loading ]
setwd("C:/Users/10sop/Desktop/통계분석학회PSAT/주제분석/데이터/주제분석_데이터")
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-04-01
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data[rf_data[, 'Date'] %>% order, ] %>% head
rf_data[rf_data[, 'Date'] %>% order, ] %>% tail
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ] %>% tail
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ]
rf_data
rf_data %>% tail
rf_data %>% head
## [ data loading ]
setwd("C:/Users/10sop/Desktop/통계분석학회PSAT/주제분석/데이터/주제분석_데이터")
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ]
rf_data %>% head
rf_data
window_size <- c(90, 95, 100)
mtry = c(3, 4,5 )
ntree = c(50, 100, 150)
window_rf_RMSE <- expand.grid(mtry = mtry,
ntree = ntree,
window_size = window_size,
RMSE = NA)
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
for (k in window_size) {
n = dim(rf_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = rf_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut # 모든 변수를 다 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
RMSE_save <- NULL
for (mt in mtry) {
for (j in ntree) {
rf_model <- randomForest(BTC_price~ Gold_price + Bond_yield + KOSPI + USD_exchange_rate + BTC_circulation +
VIX + NASDAQ + VKOSPI + S.P500 + Nvidia + AMD + MA + PYPL + SQ +
vidente + net_point_by_word + volume + Atinum + Woori,
data = rf_data, mtry = mt, ntree = j)
for ( i in (1:length(folds_test))) {
print(paste0("mtry :", mt, ",  ntree :", j ,",   시점 : ",i, "th"))
eco_test_final_y <- unlist(eco_y_test)
rf_fit <- predict(rf_model, newdata = eco_x_test[[i]])
RMSE_save <- c(RMSE_save, RMSE(rf_fit, eco_test_final_y[i]))
}
window_rf_RMSE[t, "RMSE"] <- mean(RMSE_save)
t = t + 1
RMSE_save <- NULL # RMSE_save 초기화
}
}
}
window_rf_RMSE
window_rf_RMSE[, "RMSE"]
t
mt
j
i
folds
folds_test
n
m
data_cut
data_cut %>% tail
data_cut %>% head
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
## [ data loading ]
setwd("C:/Users/10sop/Desktop/통계분석학회PSAT/주제분석/데이터/주제분석_데이터")
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ]
window_size <- c(90, 95, 100)
mtry = c(3, 4,5 )
ntree = c(50, 100, 150)
window_rf_RMSE <- expand.grid(mtry = mtry,
ntree = ntree,
window_size = window_size,
RMSE = NA)
t = 1 ## 랜포 돌려서 window_rf_RMSE 각 mtry, ntree, windowsize 당 RMSE 평균 넣을때 row 번호
for (k in window_size) {
n = dim(rf_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = rf_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut # 모든 변수를 다 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
RMSE_save <- NULL
for (mt in mtry) {
for (j in ntree) {
rf_model <- randomForest(BTC_price~ Gold_price + Bond_yield + KOSPI + USD_exchange_rate + BTC_circulation +
VIX + NASDAQ + VKOSPI + S.P500 + Nvidia + AMD + MA + PYPL + SQ +
vidente + net_point_by_word + volume + Atinum + Woori,
data = data_cut, mtry = mt, ntree = j)
for ( i in (1:length(folds_test))) {
print(paste0("mtry :", mt, ",  ntree :", j ,", ",i, "th"))
eco_test_final_y <- unlist(eco_y_test)
rf_fit <- predict(rf_model, newdata = eco_x_test[[i]])
RMSE_save <- c(RMSE_save, RMSE(rf_fit, eco_test_final_y[i]))
}
window_rf_RMSE[t, "RMSE"] <- mean(RMSE_save)
t = t + 1
RMSE_save <- NULL # RMSE_save 초기화
}
}
}
window_rf_RMSE[, "RMSE"]
data_cut
eco_x_test
eco_x_test[[61]]
eco_test_final_y[61]
rf_fit
eco_x_test[[61]]
rf_data[, "volume"]
economic_data <- fread("C:/Users/User/Desktop/주제분석_데이터파일/final_data_frame.csv")
economic_data <- economic_data[, -'V1']
install.packages("timetk")
setwd("C:/Users/10sop/Desktop/통계분석학회PSAT/주제분석/데이터/주제분석_데이터")
library("factoextra")
library("Hmisc")
economic_data <- fread("C:/Users/User/Desktop/주제분석_데이터파일/final_data_frame.csv")
economic_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8")
economic_data
economic_data %>% names
economic_data <- economic_data[, -"consumer_index"]
economic_data %>% names
economic_data <- economic_data[, -'V1']
economic_data %>% head # 날짜 미래부터 과거순임.
economic_data <- economic_data[economic_data[, "Date"] %>% order]
rownames(economic_data) <- NULL
economic_data %>% head
window_size <- c(90, 95, 100, 105, 110)
window_tuning <- expand.grid(window_size, NA)
names(window_tuning) <- c("#_of_window", "RMSE")
window_tuning
t = 1
for (k in window_size) {
n = dim(economic_data)[1] # 끝행 값
m = n-k-61+1 # 자르는 처음 값
data_cut = economic_data[m:n,]
x=1:k # 윈도우 사이즈
folds <-  list()
for(i in 1:61){ # 여기서 61은 며칠 전까지 CV돌릴것인가를 의미
folds[[i]]= x +i- 1
} # 각 리스트 번호는 몇번쨰 CV인지를 나타냄. 리스트번호가 60까지 있다면 60일 전까지 CV한다는거.
# folds의 각 list가 CV에 사용할 x들임
folds_test=list()
for (i in 1:61){
folds_test[[i]]=folds[[i]][k]+1
} # folds_test가 각 CV마다 테스트할 시점들을 모아놓은 거.
eco_y <- ts(data_cut$BTC_price) # 예측하고자 하는 y값
eco_x <- data_cut[, c("KOSPI", "VKOSPI", "MA", "PYPL", "SQ", "vidente")] # 그레인져 인과검정을 기각한 변수들만 넣음.
eco_x_test <- list()
eco_y_test <- list()
for (i in (1:length(folds_test))){
eco_y_test[[i]] <- ts(eco_y[folds_test[[i]]])
eco_x_test[[i]] <- eco_x[folds_test[[i]],] %>% as.matrix
} # eco_y_test는 test할 시점의 y값, eco_x_test 는 test할 시점의 x값
eco_yfit_1 <- c()
for (i in (1:length(folds_test))) {
print(paste0(i, "th"))
y_train <- ts(eco_y[folds[[i]]])   # y_train은 train하는 시점들의 y값(과거 y값으로 미래 값 예측하니까)
xreg_train <- as.matrix(eco_x[folds[[i]],]) # xreg_train은 train하는 시점들의 외생변수값
eco_arima <- auto.arima(y_train, xreg = as.matrix(xreg_train), approximation = FALSE)
y_fit1 <- forecast::forecast(eco_arima, xreg = eco_x_test[[i]], h=1)$mean
eco_yfit_1 <- c(eco_yfit_1, y_fit1)
}
eco_test_final_y <- unlist(eco_y_test) # eco_test_final_y는 eco_test_y값에서 하나의 벡터로 넣은것.
eco_rmse1 <- RMSE(eco_yfit_1, eco_test_final_y)
window_tuning[t,"RMSE"] <- eco_rmse1
t = t+1
}
window_tuning
fit_frame <- cbind( Date, BTC_price_true, BTC_price_fitted) %>% data.frame()
fit_frame %>% str()
ggplot(data = fit_frame, aes(x = Date))+
geom_line(aes(y = BTC_price_true, colour = 'blue'))+
geom_line(aes(y = BTC_price_fitted, colour = 'red'))
economic_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8")
economic_data <- economic_data[, -"consumer_index"]
economic_data <- economic_data[, -'V1']
economic_data %>% head # 날짜 미래부터 과거순임.
economic_data <- economic_data[economic_data[, "Date"] %>% order]
rownames(economic_data) <- NULL
economic_data %>% head
economic_data %>% tail
window_size <- c(90, 95, 100, 105, 110)
window_tuning <- expand.grid(window_size, NA)
names(window_tuning) <- c("#_of_window", "RMSE")
window_tuning
t = 1
eco_rmse1
window_tuning
BTC_price_true = eco_test_final_y
BTC_price_fitted =eco_yfit_1
Date = data_cut$Date[(dim(data_cut)[1]-60): dim(data_cut)[1]]
fit_frame <- cbind( Date, BTC_price_true, BTC_price_fitted) %>% data.frame()
fit_frame %>% str()
ggplot(data = fit_frame, aes(x = Date))+
geom_line(aes(y = BTC_price_true, colour = 'blue'))+
geom_line(aes(y = BTC_price_fitted, colour = 'red'))
set.seed(1234)
rf_data %>% names
ncol(rf_data)
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(dat)[i],"   ADFtest"))
print(adf.test(dat[,i]))
}
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(paste0(colnames(rf_data)[i],"   ADFtest"))
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
library(urca)
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
library(urca)
library(tseries)
library(vars)
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
install.library("aTSA")
install.packages("aTSA")
library("aTSA")
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
adf.test(rf_data[,1])
rf_data
adf.test(rf_data[,1])
adf.test(rf_data[,1] %>% as.matrix)
adf.test(rf_data[,2] %>% as.ts)
adf.test(rf_data[,2] %>% as.ts)
rf_data
rf_data[,2]
adf.test(rf_data[,2] %>% as.ts)
rf_data[,2]
rf_data[,1]
rf_data <- "last_data_set.csv" %>% fread(data.table = F,encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data
rf_data %>% str
rf_data <- "last_data_set.csv" %>% fread(data.table = F,encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data %>% class
rf_data
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data
rf_data <- "last_data_set.csv" %>% fread(data.table = F,encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data
rf_data <- "last_data_set.csv" %>% fread(data.table = F,encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ]
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
adf.test(rf_data[,2] %>% as.ts)
adf.test(rf_data[,2] %>% as.ts)
rf_data <- "last_data_set.csv" %>% fread(encoding = "UTF-8") # 데이터: 2018-01-01~ 2021-03-31
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
rf_data <- rf_data[,-1] # 데이터프레임에서 쓰잘데기 없는 V1 column 삭제
rf_data <- rf_data[, -'consumer_index'] # 데이터프레임에서 소비자 물가지수 삭제
rf_data <- rf_data[rf_data[, 'Date'] %>% order, ]
### 단위근 검정 --> 기각하면 정상성 만족. 정상성 만족되지 않은 경우엔 차분해서 랜포 돌릴것.
for(i in 2:ncol(rf_data)){
print(paste0(colnames(rf_data)[i],"   ADFtest"))
print(adf.test(rf_data[,i]))
}
setwd("C:/Users/10sop/Desktop/경제지표 모델링/VAR모형")
library(tidyverse)
library(data.table)
library(vars)
library(urca)
library(tseries)
library(gridExtra)
library(ggplot)
dat=fread("Economic_frame1.csv",data.table = F)
dat
dat %>% head
dat %>% class
dat<-dat[,-c(1,19)]
dat %>% class
dat <- dat[order(dat[,"Date"]), ]
rownames(dat) <- NULL
###ADFtest(?떒?쐞洹쇨??젙)###
###rawdata###
for(i in 2:ncol(dat)){
print(paste0(colnames(dat)[i],"   ADFtest"))
print(adf.test(dat[,i]))
}
